<Window x:Class="VectorThing.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:VectorThing" 
        xmlns:utility="clr-namespace:VectorThing.Utility" 
        xmlns:viewModelStuff="clr-namespace:VectorThing.Utility.ViewModelStuff"
        xmlns:data="clr-namespace:VectorThing.ViewModels"
        xmlns:models="clr-namespace:VectorThing.Models"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        mc:Ignorable="d"
        Title="Vector Thing"
        Height="{Binding Source={x:Static SystemParameters.PrimaryScreenHeight}, Converter={utility:RatioConverter}, ConverterParameter='0.6' }" 
        Width="{Binding Source={x:Static SystemParameters.PrimaryScreenWidth}, Converter={utility:RatioConverter}, ConverterParameter='0.6' }"
        Background="SlateGray"
        FontSize="1">
    
    <Window.Resources>
        <Style TargetType="{x:Type Control}" x:Key="baseStyle">
            <Setter Property="FontSize" Value="18" />
        </Style>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource baseStyle}"></Style>

        <Style x:Key="textParseError" TargetType="{x:Type TextBox}" BasedOn="{StaticResource baseStyle}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                        Path=(Validation.Errors)/ErrorContent}"/>
                    <Setter Property="Background" Value="Red"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <utility:ColorToBrushConverter 
            x:Key="ColorToBrushConverter"
            />
        <utility:ToolsEnumToBoolConverter
            x:Key="ToolsEnumToBoolConverter"
            />

        <DataTemplate DataType="{x:Type models:RectangleVectorShapeModel}">
            <Rectangle
                    Width="{Binding Width}"
                    Height="{Binding Height}"
                    Fill="{Binding Color, Converter={StaticResource ColorToBrushConverter}}"
                    Cursor="Hand"
                    >
                <Rectangle.LayoutTransform>
                    <RotateTransform Angle="{Binding Rot}"></RotateTransform>
                </Rectangle.LayoutTransform>
            </Rectangle>
        </DataTemplate>

        <DataTemplate DataType="{x:Type models:LineVectorShapeModel}">
            <Line
                X1="{Binding X1}"
                Y1="{Binding Y1}"
                X2="{Binding X2}"
                Y2="{Binding Y2}"
                Stroke="{Binding Color, Converter={StaticResource ColorToBrushConverter}}"
                StrokeThickness="{Binding Scale}"
                Cursor="Hand"
                >
                <Line.LayoutTransform>
                    <RotateTransform Angle="{Binding Rot}"></RotateTransform>
                </Line.LayoutTransform>
            </Line>
        </DataTemplate>

        <DataTemplate DataType="{x:Type models:CircleVectorShapeModel}">
            <Ellipse
                Width="{Binding Radius}"
                Height="{Binding Radius}"
                Fill="{Binding Color, Converter={StaticResource ColorToBrushConverter}}"
                Cursor="Hand"
                >
                <Ellipse.LayoutTransform>
                    <RotateTransform Angle="{Binding Rot}"/>
                </Ellipse.LayoutTransform>
            </Ellipse>
        </DataTemplate>

        <DataTemplate DataType="{x:Type models:EllipseVectorShapeModel}">
            <Ellipse
                Width="{Binding Width}"
                Height="{Binding Height}"
                Fill="{Binding Color, Converter={StaticResource ColorToBrushConverter}}"
                Cursor="Hand"
                >
                <Ellipse.LayoutTransform>
                    <RotateTransform Angle="{Binding Rot}"/>
                </Ellipse.LayoutTransform>
            </Ellipse>
        </DataTemplate>

        <DataTemplate DataType="{x:Type models:ExamVectorShapeModel}">
            <Grid>
                <Ellipse
                    Width="{Binding Radius}"
                    Height="{Binding Radius}"
                    Fill="{Binding Color, Converter={StaticResource ColorToBrushConverter}}"
                    Cursor="Hand"
                    >
                </Ellipse>
                <Line Panel.ZIndex="2" X1="{Binding HorzLine1X1}" Y1="{Binding HorzLine1Y1}" X2="{Binding HorzLine1X2}" Y2="{Binding HorzLine1Y2}" Stroke="Black"
                StrokeThickness="5"/>
                <Line Panel.ZIndex="3" X1="{Binding HorzLine2X1}" Y1="{Binding HorzLine2Y1}" X2="{Binding HorzLine2X2}" Y2="{Binding HorzLine2Y2}" Stroke="Black"
                StrokeThickness="5"/>
                <Line Panel.ZIndex="3" X1="{Binding VertLineX1}" Y1="{Binding VertLineY1}" X2="{Binding VertLineX2}" Y2="{Binding VertLineY2}" Stroke="Black"
                StrokeThickness="5"/>
                <Grid.LayoutTransform>
                    <RotateTransform Angle="{Binding Rot}"/>
                </Grid.LayoutTransform>
            </Grid>
        </DataTemplate>
        
        <DataTemplate x:Key="ListBoxLayerTemplate" DataType="{x:Type viewModelStuff:Layer}">
            <ListBoxItem>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition Width="2*"></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <CheckBox IsChecked="{Binding IsVisible, UpdateSourceTrigger=PropertyChanged}"></CheckBox>
                    <TextBox Grid.Column="1" IsEnabled="{Binding IsEditable}" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                    <TextBox Grid.Column="2" IsEnabled="{Binding IsEditable}" Text="{Binding Depth, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                </Grid>
            </ListBoxItem>
        </DataTemplate>

        <DataTemplate x:Key="ComboBoxLayerTemplate" DataType="{x:Type viewModelStuff:Layer}">
            <Label Content="{Binding Name, UpdateSourceTrigger=PropertyChanged}"></Label>
        </DataTemplate>

    </Window.Resources>

    <Window.DataContext>
        <data:MainViewModel />
    </Window.DataContext>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition Width="3*"></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.2*"></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        
        <Menu Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="0" Grid.RowSpan="1">
            <MenuItem Header="_File">
                <MenuItem Header="_Open" Command="{Binding OpenCommand}"/>
                <MenuItem Header="_Save As VectorThingFormat" Command="{Binding SaveJsonCommand}"/>
                <MenuItem Header="_Save As PNG" Command="{Binding SavePngCommand}" CommandParameter="{Binding ElementName=Canvas}"/>
            </MenuItem>

            <MenuItem Header="_Image">
                <MenuItem Header="Size">
                    <UniformGrid Columns="2">
                        <Label>Width</Label>
                        <TextBox x:Name="CanvasWidth" Style="{StaticResource textParseError}">
                            <Binding Path="CanvasWidth" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <utility:NumbersOnlyValidationRule/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox>
                        <Label>Height</Label>
                        <TextBox x:Name="CanvasHeight" Style="{StaticResource textParseError}">
                            <Binding Path="CanvasHeight" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <utility:NumbersOnlyValidationRule/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox>
                    </UniformGrid>
                </MenuItem>
                <MenuItem Header="Canvas Color">
                    <xctk:ColorPicker x:Name="CanvasColorPicker" SelectedColor="{Binding CanvasColor, UpdateSourceTrigger=PropertyChanged}"></xctk:ColorPicker>
                </MenuItem>
                <MenuItem Header="_Clear" Command="{Binding ClearCanvasCommand}"/>
            </MenuItem>

            <CheckBox IsChecked="True" Checked="CheckBoxChanged" Unchecked="CheckBoxChanged">Tools</CheckBox>
            <CheckBox IsChecked="True" Checked="ColorCheckBoxChanged" Unchecked="ColorCheckBoxChanged">Color Picker</CheckBox>
            <MenuItem Header="_Layers">
                <ScrollViewer VerticalScrollBarVisibility="Visible" Width="200" Height="100" Margin="0, 0, -45, 0">
                    <ListBox ItemsSource="{Binding Layers}" ItemTemplate="{StaticResource ListBoxLayerTemplate}">
                    </ListBox>
                </ScrollViewer>
                <Button Command="{Binding CreateLayerCommand}">Add new layer</Button>
            </MenuItem>
        </Menu>

        <ScrollViewer Panel.ZIndex="-3" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="3" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
            <!--Tva moje da stae items control-->
            <ListBox Width="{Binding CanvasWidth}" Height="{Binding CanvasHeight}"
            x:Name="Canvas"
            ItemsSource="{Binding VectorShapes}"
            SelectionMode="Extended"
            SelectedItem="{Binding SelectedElement}"
            >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDown" >
                        <i:InvokeCommandAction Command="{Binding CanvasMouseDownCommand}" CommandParameter="{Binding ElementName=Canvas}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove" >
                        <i:InvokeCommandAction Command="{Binding CanvasMouseMoveCommand}" CommandParameter="{Binding ElementName=Canvas}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseUp" >
                        <i:InvokeCommandAction Command="{Binding CanvasMouseUpCommand}" CommandParameter="{Binding ElementName=Canvas}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas Background="{Binding CanvasColor, Converter={StaticResource ColorToBrushConverter}}" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>

                <ListBox.ItemContainerStyle>
                    <Style
                    TargetType="ListBoxItem"
                    >
                        <Setter 
                        Property="Visibility"
                        Value="{Binding Layer.Visibility}" 
                        />
                        <Setter
                        Property="Panel.ZIndex"
                        Value="{Binding Layer.Depth}"
                        />
                        <Setter
                        Property="Canvas.Left"
                        Value="{Binding X}"
                        />
                        <Setter
                        Property="Canvas.Top"
                        Value="{Binding Y}"
                        />
                        <Setter Property="Padding" 
                        Value="0"
                        />
                        <Setter 
                        Property="BorderThickness"
                        Value="2"
                        />
                    </Style>
                </ListBox.ItemContainerStyle>

            </ListBox>
        </ScrollViewer>

        <UniformGrid x:Name="Toolbox" Columns="4" Rows="4" Grid.Column="0" Grid.Row="2" Grid.RowSpan="2">
            <RadioButton ToolTip="Select" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=Select}" Style="{StaticResource {x:Type ToggleButton}}">
                <Image Source="/VectorThing;component/Images/Cursor_16x.png"/>
            </RadioButton>
            <RadioButton ToolTip="Copy/Paste" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=CopyPaste}" Style="{StaticResource {x:Type ToggleButton}}">
                <Image Source="/VectorThing;component/Images/CopyItem_16x.png"/>
            </RadioButton>
            <RadioButton ToolTip="Create Rectangle" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=CreateRect}" Style="{StaticResource {x:Type ToggleButton}}">
                <Image Source="/VectorThing;component/Images/SquareSingleFilled_16x.png"/>
            </RadioButton>
            <RadioButton ToolTip="Create Line" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=CreateLine}" Style="{StaticResource {x:Type ToggleButton}}">
                <Image Source="/VectorThing;component/Images/LineChart_16x.png"/>
            </RadioButton>
            <RadioButton ToolTip="Create Circle" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=CreateCircle}" Style="{StaticResource {x:Type ToggleButton}}">
                <Image Source="/VectorThing;component/Images/SpherePreview_16x.png"/>
            </RadioButton>
            <RadioButton ToolTip="Create Ellipse" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=CreateEllipse}" Style="{StaticResource {x:Type ToggleButton}}">
                <Image Source="/VectorThing;component/Images/Ellipse_16x.png"/>
            </RadioButton>
            <RadioButton ToolTip="Create Exam Shape" IsChecked="{Binding SelectedTool, Mode=TwoWay, Converter={StaticResource ToolsEnumToBoolConverter}, ConverterParameter=CreateExam}" Style="{StaticResource {x:Type ToggleButton}}"/>
        </UniformGrid>

        <Grid x:Name="ColorPickerPanel" Grid.Row="3" Grid.Column="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition></ColumnDefinition>
                <ColumnDefinition></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition></RowDefinition>
            </Grid.RowDefinitions>
            <Label Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Background="WhiteSmoke">Color:</Label>
            <xctk:ColorPicker x:Name="ColorPicker" SelectedColor="{Binding Color, UpdateSourceTrigger=PropertyChanged}" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"></xctk:ColorPicker>
        </Grid>

        <UniformGrid x:Name="Transform" Columns="2" Rows="8" Grid.Column="2" Grid.Row="2" Grid.RowSpan="2" Visibility="{Binding TransformVisibility}" Background="WhiteSmoke">
            <Label Visibility="{Binding TransformNameVisibility}">Name:</Label>
            <TextBox Visibility="{Binding TransformNameVisibility}" Text="{Binding SelectedElementName, UpdateSourceTrigger=PropertyChanged}"/>
            <Label>Pos X:</Label>
            <TextBox x:Name="PosXTB" Style="{StaticResource textParseError}">
                <Binding Path="SelectedElementX" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <utility:NumbersOnlyValidationRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <Label>Pos Y:</Label>
            <TextBox x:Name="PosYTB" Style="{StaticResource textParseError}">
                <Binding Path="SelectedElementY" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <utility:NumbersOnlyValidationRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <Label>Rotation:</Label>
            <TextBox x:Name="RotTB" Style="{StaticResource textParseError}">
                <Binding Path="SelectedElementRot" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <utility:NumbersOnlyValidationRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <Label></Label>
            <Slider Minimum="0" Maximum="360" IsSnapToTickEnabled="True" TickFrequency="1" Value="{Binding SelectedElementRot, UpdateSourceTrigger=PropertyChanged}"></Slider>
            <Label>Scale:</Label>
            <TextBox x:Name="ScaleTB" Style="{StaticResource textParseError}">
                <Binding Path="SelectedElementScale" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <utility:NumbersOnlyValidationRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <Label>Layer:</Label>
            <ComboBox x:Name="Layer" ItemTemplate="{StaticResource ComboBoxLayerTemplate}" ItemsSource="{Binding Layers}" SelectedItem="{Binding SelectedElementLayer, UpdateSourceTrigger=PropertyChanged}"></ComboBox>
            <Button Content="Close" Command="{Binding DeselectCommand}"></Button>
            <Button Content="Delete" Command="{Binding DeleteCommand}"></Button>
        </UniformGrid>

    </Grid>
</Window>
